
#include <stdio.h>
#include <stdlib.h>

// Define the structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the beginning of the list
void insertAtStart(struct Node** head, int data) {
    struct Node* newNode = createNode(data);
    newNode->next = *head;  // New node's next points to current head
    *head = newNode;        // Update head to the new node
    printf("%d inserted at the start of the list\n", data);
}

// Function to delete a node from the beginning of the list
void deleteAtStart(struct Node** head) {
  struct Node* temp = *head;
    if (*head == NULL) {
	printf("List is empty, nothing to delete\n");
	return;
    }


    *head = (*head)->next;  // Update the head to the next node
    printf("%d deleted from the start of the list\n", temp->data);
    free(temp);             // Free the old head node
}

// Function to display the linked list
void displayList(struct Node* head) {
 struct Node* temp = head;
    if (head == NULL) {
	printf("List is empty\n");
	return;
    }


    printf("List: ");
    while (temp != NULL) {
        printf("%d -> ", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

int main() {
    struct Node* head = NULL;  // Initialize the list as empty

    // Insert elements at the start of the list
    insertAtStart(&head, 30);
    insertAtStart(&head, 20);
    insertAtStart(&head, 10);

    // Display the list
    displayList(head);

    // Delete elements from the start of the list
    deleteAtStart(&head);
    displayList(head);

    deleteAtStart(&head);
    displayList(head);

    deleteAtStart(&head);
    displayList(head);
     getch();
    return 0;
}

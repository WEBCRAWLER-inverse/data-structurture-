#include<stdio.h>
#include<stdlib.h>
#include<conio.h>
struct Node{
int dest;
struct Node*next;
};

struct AdjList{
struct Node*head;
};

struct Graph{
int numVertices;
struct AdjList*array;
};

struct Node*createNode(int dest){
struct Node*newNode =(struct Node*)malloc(sizeof(struct Node));
newNode->dest = dest;
newNode->next = NULL;
return newNode;
}

struct Graph*createGraph(int vertices){ int i;
struct Graph*graph = (struct Graph*)malloc(sizeof(struct Graph));
graph->numVertices = vertices;

graph->array = (struct AdjList*)malloc(vertices*sizeof(struct AdjList));

for( i = 0; i < vertices; i++){
graph->array[i].head=NULL;
}

return graph;
}

void addEdge(struct Graph*graph, int src, int dest){

struct Node* newNode = createNode(dest);
newNode->next = graph->array[src].head;
graph->array[src].head = newNode;

newNode = createNode(src);
newNode->next = graph->array[dest].head;
graph->array[dest].head = newNode;
}

void BFS(struct Graph*graph, int startVertex){int i;
int*visited = (int*)malloc(graph->numVertices*sizeof(int));

int queue[100];
int front = 0, rear = 0;


for (i = 0; i<graph->numVertices; i++){
visited[i] = 0;
}

visited[startVertex] = 1;
queue[rear++] = startVertex;

printf("BFS Traversal starting from vertex %d:", startVertex);

while(front != rear){int currentVertex;




struct Node*temp = graph->array[currentVertex].head;
currentVertex = queue[front++];
printf("%d", currentVertex);while(temp){
int adjVertex = temp->dest;
if(!visited[adjVertex]){
visited[adjVertex] = 1;
queue[rear++] = adjVertex;
}
temp = temp->next;
}
}

printf("\n");
free(visited);
}

void DFSUtil(struct Graph* graph, int vertex, int*visited){
struct Node* temp = graph->array[vertex].head;
visited[vertex]= 1;
printf("%d", vertex);


while(temp){
int adjVertex = temp->dest;
if(!visited[adjVertex]){
DFSUtil(graph, adjVertex, visited);
}
temp = temp->next;
}
}


void DFS(struct Graph* graph, int startVertex){int i;
int*visited = (int*)malloc(graph->numVertices*sizeof(int));

for( i = 0; i<graph->numVertices; i++){
visited[i] = 0;
}

printf("DFS Traversal starting from vertex %d:", startVertex);
DFSUtil(graph, startVertex, visited);
printf("\n");
free(visited);
}

int main(){

int vertices = 6;
struct Graph*graph = createGraph(vertices);
clrscr();
addEdge(graph, 0, 1);
addEdge(graph, 0, 2);
addEdge(graph, 1, 3);
addEdge(graph, 1, 4);
addEdge(graph, 2, 4);
addEdge(graph, 3, 5);
addEdge(graph, 4, 5);

BFS(graph, 0);
DFS(graph, 0);
getch();
return 0;
}
